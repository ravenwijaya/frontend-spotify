{"ast":null,"code":"import Axios from \"axios\"; // import { getAccessToken } from '../services/auth';\n\nimport config from \"../config\";\nexport const bati = Axios.create({\n  baseURL: `${config.api.baseUrl}`\n});\n\nconst getAccessToken = async () => {\n  let auth = `${config.api.clientId}:${config.api.clientSecret}`;\n  let encodedAuth = btoa(auth); //   let initBody = new URLSearchParams();\n  //   initBody.set(\"grant_type\", \"client_credentials\");\n\n  console.log(encodedAuth);\n  const data = await Axios({\n    method: 'post',\n    url: 'https://accounts.spotify.com/api/token',\n    params: {\n      grant_type: \"client_credentials\"\n    },\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    auth: {\n      username: `${config.api.clientId}`,\n      password: `${config.api.clientSecret}`\n    }\n  }).then(token => {\n    return token;\n  }).catch(e => {\n    return e.response.data;\n  });\n  console.log(data);\n  console.log(\"asd\");\n  return data ? data : null;\n};\n\nbati.interceptors.request.use(async config => {\n  const token = await getAccessToken();\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return config;\n});","map":{"version":3,"sources":["C:/Users/wijay/OneDrive/Desktop/spootify/src/utils/Axios.js"],"names":["Axios","config","bati","create","baseURL","api","baseUrl","getAccessToken","auth","clientId","clientSecret","encodedAuth","btoa","console","log","data","method","url","params","grant_type","headers","username","password","then","token","catch","e","response","interceptors","request","use","Authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAO,MAAMC,IAAI,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAG,GAAEH,MAAM,CAACI,GAAP,CAAWC,OAAQ;AADA,CAAb,CAAb;;AAIP,MAAMC,cAAc,GAAG,YAAY;AACjC,MAAIC,IAAI,GAAI,GAAEP,MAAM,CAACI,GAAP,CAAWI,QAAS,IAAGR,MAAM,CAACI,GAAP,CAAWK,YAAa,EAA7D;AACA,MAAIC,WAAW,GAAGC,IAAI,CAACJ,IAAD,CAAtB,CAFiC,CAGjC;AACA;;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,QAAMI,IAAI,GAAG,MAAMf,KAAK,CAAC;AACvBgB,IAAAA,MAAM,EAAE,MADe;AAEvBC,IAAAA,GAAG,EAAC,wCAFmB;AAGvBC,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE;AADR,KAHe;AAMvBC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KANc;AAUvBZ,IAAAA,IAAI,EAAE;AACFa,MAAAA,QAAQ,EAAG,GAAEpB,MAAM,CAACI,GAAP,CAAWI,QAAS,EAD/B;AAEFa,MAAAA,QAAQ,EAAG,GAAErB,MAAM,CAACI,GAAP,CAAWK,YAAa;AAFnC;AAViB,GAAD,CAAL,CAehBa,IAfgB,CAeVC,KAAD,IAAW;AACf,WAAOA,KAAP;AACD,GAjBgB,EAkBhBC,KAlBgB,CAkBTC,CAAD,IAAO;AACZ,WAAOA,CAAC,CAACC,QAAF,CAAWZ,IAAlB;AACD,GApBgB,CAAnB;AAqBAF,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,SAAOC,IAAI,GAAGA,IAAH,GAAU,IAArB;AACD,CA/BD;;AAiCAb,IAAI,CAAC0B,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,MAAO7B,MAAP,IAAkB;AAC9C,QAAMuB,KAAK,GAAG,MAAMjB,cAAc,EAAlC;;AACA,MAAIiB,KAAJ,EAAW;AACTvB,IAAAA,MAAM,CAACmB,OAAP,CAAeW,aAAf,GAAgC,UAASP,KAAM,EAA/C;AACD;;AACD,SAAOvB,MAAP;AACD,CAND","sourcesContent":["import Axios from \"axios\";\r\n// import { getAccessToken } from '../services/auth';\r\nimport config from \"../config\";\r\n\r\nexport const bati = Axios.create({\r\n  baseURL: `${config.api.baseUrl}`,\r\n});\r\n\r\nconst getAccessToken = async () => {\r\n  let auth = `${config.api.clientId}:${config.api.clientSecret}`;\r\n  let encodedAuth = btoa(auth);\r\n  //   let initBody = new URLSearchParams();\r\n  //   initBody.set(\"grant_type\", \"client_credentials\");\r\n\r\n  console.log(encodedAuth);\r\n  const data = await Axios({\r\n    method: 'post',\r\n    url:'https://accounts.spotify.com/api/token',\r\n    params: {\r\n        grant_type: \"client_credentials\"\r\n    },\r\n    headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n    },\r\n    auth: {\r\n        username: `${config.api.clientId}`,\r\n        password: `${config.api.clientSecret}`\r\n    }\r\n})\r\n    .then((token) => {\r\n      return token;\r\n    })\r\n    .catch((e) => {\r\n      return e.response.data;\r\n    });\r\n  console.log(data);\r\n  console.log(\"asd\");\r\n  return data ? data : null;\r\n};\r\n\r\nbati.interceptors.request.use(async (config) => {\r\n  const token = await getAccessToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n"]},"metadata":{},"sourceType":"module"}